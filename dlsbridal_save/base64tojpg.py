# -*- coding: utf-8 -*-
"""
Created on Sun Jan 12 01:34:45 2014

@author: amyskerry
"""

import base64
import csv
import datetime

#jpgtxt = base64.encodestring(open("in.jpg","rb").read())

jpgtxt=""

date=datetime.datetime.now()
datestr=date.strftime("%Y-%m-%d")
photofile='/Users/amyskerry/documents/projects/dlsbridal/dlsbridal_save/dlsphotos.csv'
savedir='/Users/amyskerry/documents/projects/dlsbridal/dlsbridal_save/photos/'
allphotos=[]
with open(photofile, 'rU') as csvfile:
    reader = csv.reader(csvfile)
    for rown, row in enumerate(reader):
        if rown==0:
            photoindex=row.index('photo')
        else:
            photoentry=row[photoindex]
            cutstring="MiniFieldStorage('photofield', '"
            photo=photoentry[len(cutstring):]
            allphotos.append(photo)
    
for photon, photo in enumerate(allphotos):
    g = open(savedir+'photo'+str(photon)+'_'+datestr+'.jpg', 'w')
    g.write(base64.decodestring(photo))
    g.close()